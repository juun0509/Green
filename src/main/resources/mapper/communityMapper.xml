<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.green.tonicbank.Community">

	<delete id="deleteAll">
		delete from community
	</delete>
	
	<delete id="delete" parameterType="map">
		delete from community where communityId=#{communityId} and userId=#{userId}
	</delete>
	
	<insert id="insert" parameterType="Community">
		insert into community (category, title, content, userId, productName) 
		values (#{category}, #{title}, #{content}, #{userId}, #{productName});
	</insert>

	<select id="selectAll" resultType="Community" parameterType="SearchCondition">
		SELECT community.*, user.nick FROM community 
		JOIN user ON community.userId = user.userId 
		<include refid="searchCondition" />
		<include refid="categoryFilter" />
		 order by communityId desc
		 limit #{offset}, #{pageSize}
	</select>
	
	<!-- 카테고리 -->
	<sql id="categoryFilter">
		<choose>
			<when test='orderType == "인기"'>
				and likeCount >= 10 
			</when>
			<when test='orderType == "자유"'>
				 and category="자유"
			</when>
			<when test='orderType == "후기"'>
				 and category="후기"
			</when>
		</choose>
	</sql>
	
	<!-- 검색 -->
	<sql id="searchCondition">
		<choose>
			<when test='option=="T"'>
				where title like concat('%', #{keyword}, '%')
			</when>
			<when test='option=="C"'>
				where content like concat('%', #{keyword}, '%')
			</when>
			<when test='option=="W"'>
				<!-- where userId like concat('%', #{keyword}, '%') -->
				INNER JOIN user ON community.userId = user.userId
				WHERE user.nick like concat('%', #{keyword}, '%')
			</when>
			<otherwise>
				where (title like concat('%', #{keyword}, '%')
 				or content like concat('%', #{keyword}, '%'))
			</otherwise>
		</choose>
	</sql>
	
	<select id="select" parameterType="Integer" resultType="Community">
		SELECT community.*, user.nick FROM community 
		JOIN user ON community.userId = user.userId 
		where communityId=#{communityId}
	</select>
	
	<select id="count" resultType="int" parameterType="SearchCondition">
		select count(*) from community 
		<include refid="searchCondition" />
		<include refid="categoryFilter" />
	</select>
	
	<update id="updateViewCount" parameterType="int">
		update community set viewCount = viewCount + 1
		where communityId = #{ communityId }
	</update>
	
	<update id="updateLikeCount" parameterType="map">
		update community set likeCount = likeCount + #{ likeCount }
		where communityId = #{ communityId }
	</update>
	
	<update id="updateCommentCount" parameterType="map">
		update community set commentCount = commentCount + #{ commentCount }
		where communityId = #{ communityId }
	</update>
	
	<select id="selectAllLike" parameterType="int" resultType="int">
		select count(*) from communityLikes
		where communityId = #{communityId}
	</select>
	
	<select id="selectLike" parameterType="map" resultType="int">
		select count(*) from communityLikes 
		where userId = #{userId} and communityId = #{communityId}
	</select>
	
	<insert id="insertLike" parameterType="map">
		insert into communityLikes(userId, communityId)
		values (#{userId}, #{communityId})
	</insert>
	
	<delete id="deleteLike" parameterType="map">
		delete from communityLikes
		where userId = #{userId} and communityId = #{communityId}
	</delete>
	
	<insert id="insertComment" parameterType="CommunityComment">
		insert into communityComment(communityId, content, userId, `group`, parentCommentId, groupOrder, step)
		values (#{communityId}, #{content}, #{userId}, #{group}, #{parentCommentId}, #{groupOrder}, #{step})
	</insert>
	
	<select id="selectComment" parameterType="int" resultType="CommunityComment">
		select communityComment.*, user.nick from communityComment
		JOIN user ON communityComment.userId = user.userId
		where communityId = #{communityId}
		order by `group` asc, groupOrder asc
	</select>
	
	<select id="selectDetailComment" parameterType="int" resultType="CommunityComment">
		select * from communityComment 
		where communityCommentId = #{communityCommentId}
	</select>
	
	<update id="updateComment" parameterType="CommunityComment">
		update communityComment set content = #{content}, deleteStatus = #{deleteStatus}
		where communityCommentId = #{communityCommentId} and userId = #{userId}
	</update>
	
	<update id="updateCommentChildCount" parameterType="int">
		UPDATE communityComment 
		SET childCount = COALESCE(
		    (
		        SELECT subquery.countResult
		        FROM (
		            SELECT COUNT(*) + SUM(childCount) as countResult
		            FROM communityComment
		            WHERE parentCommentId = #{communityCommentId}
		        ) AS subquery
		    ),
		    0
		)
		WHERE communityCommentId = #{communityCommentId};
	</update>
	
	<update id="updateCommentGroupOrder" parameterType="map">
		update communityComment
		set groupOrder = groupOrder + #{count}
		where `group` = #{comment.group} and groupOrder >= #{comment.groupOrder}
	</update>
	
	<delete id="deleteComment">
		delete from communityComment
		where childCount = 0 and deleteStatus = true
	</delete>
</mapper>